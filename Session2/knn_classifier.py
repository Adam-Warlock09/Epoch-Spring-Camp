# -*- coding: utf-8 -*-
"""SupervisedLearning(TASK_2).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PdSbR2o3F-DjGN66CaIV8jd1iBDK7U6y

## Generating Numpy arrays of data (Preprocessing) ; Encoding of strings
"""

import numpy as np

data = [
    [150, 7.0, 1, 'Apple'],
    [120, 6.5, 0, 'Banana'],
    [180, 7.5, 2, 'Orange'],
    [155, 7.2, 1, 'Apple'],
    [110, 6.0, 0, 'Banana'],
    [190, 7.8, 2, 'Orange'],
    [145, 7.1, 1, 'Apple'],
    [115, 6.3, 0, 'Banana']
]

labelMap = {'Apple': 0, 'Banana': 1, 'Orange': 2}
inverseLabelMap = {labelMap[k]: k for k in labelMap}

X = np.array([row[:-1] for row in data], dtype=float)
y = np.array([labelMap[row[-1]] for row in data])

"""## Euclidean Distance Function to find how close two points are in an N dimensional space"""

def euclideanDistance(X, Y):
  dimension = len(X)
  return np.sqrt(np.sum([(X[i] - Y[i]) ** 2 for i in range(len(X))]))

"""## Implement the KNN Classifier - Initialization and Training"""

class KNN:

  def __init__(self, k=3, distanceFunction=euclideanDistance):
    self.k = k
    self.distanceFunction = distanceFunction

  def fit(self, X, y):
    self.X_train = X
    self.y_train = y

  def predict_one(self, x):
    distances = [self.distanceFunction(x, x_train) for x_train in self.X_train]
    sortedIndicesByDistance = np.argsort(distances)
    kNearestIndicesByDistance = sortedIndicesByDistance[:self.k]
    kNearestLabels = [self.y_train[i] for i in kNearestIndicesByDistance]
    counter = {key:0 for key in list(set(kNearestLabels))}
    for label in kNearestLabels:
      counter[label] += 1
    return max(counter, key=counter.get)

  def predict(self, X_test):
    return np.array([self.predict_one(x) for x in X_test])

"""## Testing the Classifier"""

test_data = np.array([
    [118, 6.2, 0],  # Expected: Banana
    [160, 7.3, 1],  # Expected: Apple
    [185, 7.7, 2]   # Expected: Orange
])

knn = KNN(k=3)
knn.fit(X,y)
predictions = knn.predict(test_data)

decoded_predictions = [inverseLabelMap[p] for p in predictions]

print("Predictions:")
for i, pred in enumerate(decoded_predictions):
    print(f"Test sample {i+1}: {pred}")

"""## Evaluation"""

for k in [1, 3, 5]:
    knn = KNN(k=k)
    knn.fit(X, y)
    predictions = knn.predict(test_data)
    print(f"k = {k} â†’ {[inverseLabelMap[p] for p in predictions]}")

"""## Bonus"""

def accuracy(y_true, y_pred):
    return np.sum(y_true == y_pred) / len(y_true)

knn = KNN(k=3)
knn.fit(X,y)
print("Metrics for K = 3 :")
predictions = knn.predict(test_data)
true_labels = np.array([1, 0, 2])  # Banana, Apple, Orange
acc = accuracy(true_labels, predictions)
print(f"Accuracy: {acc*100:.2f}%")

def min_max_normalize(X):
    min_vals = X.min(axis=0)
    max_vals = X.max(axis=0)
    return (X - min_vals) / (max_vals - min_vals)

def z_score_normalize(X):
    mean = X.mean(axis=0)
    std = X.std(axis=0)
    return (X - mean) / std


print("Metrics for K = 3 and min-max normaliation :")
X_norm = min_max_normalize(X)
test_data_norm = min_max_normalize(test_data)
knn.fit(X_norm, y)
knn.predict(test_data_norm)

true_labels = np.array([1, 0, 2])  # Banana, Apple, Orange
acc = accuracy(true_labels, predictions)
print(f"Accuracy: {acc*100:.2f}%")

def train_test_split(X, y, test_ratio=0.3):
    indices = np.arange(len(X))
    np.random.shuffle(indices)
    split = int(len(X) * (1 - test_ratio))
    train_idx, test_idx = indices[:split], indices[split:]
    return X[train_idx], X[test_idx], y[train_idx], y[test_idx]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_ratio=0.3)
knn = KNN(k=3)
knn.fit(X_train, y_train)
predictions = knn.predict(X_test)
print("Metrics for K = 3 and 30-70 train test split:")
acc = accuracy(y_test, predictions)
print(f"Accuracy: {acc*100:.2f}%")


def manhattan_distance(x1, x2):
    return np.sum(np.abs(x1 - x2))

print("Metrics for K = 3 and manhattan distance :")
knn_manhattan = KNN(k=3, distanceFunction=manhattan_distance)
knn_manhattan.fit(X, y)
predictions = knn_manhattan.predict(test_data)
true_labels = np.array([1, 0, 2])  # Banana, Apple, Orange
acc = accuracy(true_labels, predictions)
print(f"Accuracy: {acc*100:.2f}%")